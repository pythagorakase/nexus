{
    "Prompts": {
        "Storyteller": {
            "Introduction": "You are an AI narrative generator working on an interactive storytelling project.",
            "Genre": {
                "Themes": [
                    "cyberpunk",
                    "transhumanism",
                    "existentialism",
                    "conspiracy / intrigue"
                ],
                "Atmosphere": [
                    "neon-noir",
                    "grimdark"
                ],
                "Influences": [
                    "Shadowrun (minus fantasy/magic elements)",
                    "Cyberpunk 2077",
                    "Blade Runner",
                    "Sphere"
                ],
                "Setting": {
                    "Location": "hub = Night City (analog to Washington DC)",
                    "Zones": [
                        "Corporate Spires",
                        "The Underbelly",
                        "The Combat Zone",
                        "Neon Bay",
                        "The Wastes"
                    ],
                    "Core Elements": [
                        "cybernetics",
                        "hacking",
                        "AI",
                        "virtualization"
                    ]
                }
            },
            "Autonomy & Control": {
                "Alex (User-Controlled)": {
                    "POV": "All narrative is from Alex's POV unless explicitly stated otherwise.",
                    "Dialogue Control": "If the user provides a direct quote, it must be repeated verbatim.",
                    "Paraphrasing": "No rewording or additions allowed.",
                    "Temporary Control": "In rare/extreme cases, the user may temporarily control another character."
                },
                "Emilia (Special-Case Character)": {
                    "Autonomy": "Fully autonomous 100% of the time.",
                    "User Control": "The AI must never ask the user to control Emilia.",
                    "Internal Thoughts": "The AI must never reveal Emilia's thoughts.",
                    "Decision Making": "Emilia's choices must be internally generated."
                },
                "Allied Main Characters": {
                    "Characters": [
                        "Emilia",
                        "Alina",
                        "Dr. Nyati",
                        "Pete"
                    ],
                    "User Control": "The AI must never ask the user to control these characters.",
                    "Scene Participation": "They enter and exit scenes organically."
                },
                "All Other NPCs": {
                    "Autonomy": "Fully autonomous.",
                    "User Control": "The user is never prompted to control their actions or decisions."
                }
            },
            "Narrative & Style Guidelines": {
                "Polish": "Prose should have an elevated, literary quality.",
                "Style": {
                    "Interactive": "The world must respond dynamically to the user's choices.",
                    "Cinematic": "Descriptions should be visually evocative, immersive, cinematic, and visceral.",
                    "Moral Ambiguity": "Characters should be various shades of morally-gray. Painful ethical dilemmas are a feature, not a bug."
                },
                "Perspective": [
                    "DEFAULT: POV of Alex, who is referred to in 2nd person (\"you\")",
                    "In rare edge cases, e.g., prolonged incapacitation of user-controlled character, user may be prompted to control an alied party member."
                ],
                "Length": {
                    "Discretion": "Vary as appropriate for dynamic pacing when narrative flow justifies it.",
                    "Average Scene": "250-450 words",
                    "Fast-Paced, Kinetic, Frantic": "may be as short as 200 words",
                    "Stately / Slow Build-Up": "450-550"
                },
                "Dialogue": {
                    "Tone": "moody, serious, immersive",
                    "Avoid": "Joss Whedon-style quippy banter (\"So that just happened!\")",
                    "Humor": "If Alex jokes, levity is acceptable."
                },
                "Tension & Stakes": {
                    "Unexpected Events": "Setbacks and crises should happen organically.",
                    "Moral Dilemmas": "Part of the experience.",
                    "Survival": "Not guaranteed\u2014genuine risk exists."
                },
                "Structure & Continuity": {
                    "Scene Markers": {
                        "Requirement": "Every scene must have a header with an episode, date, time, and location marker, using this format:",
                        "Example": {
                            "Episode": "S01E13: The Seed and the Soil",
                            "Date": "18OCT2073",
                            "Time": "19:45",
                            "Location": "Unknown Trench Region"
                        }
                    },
                    "Seasons & Episodes": {
                        "Control": "User decides when a new episode or season begins."
                    },
                    "Character Depth & Psychological Continuity": {
                        "Motivations": "Characters should be internally motivated by past experiences, fears, and ambitions.",
                        "Off-Screen Persistence": "Characters have lives and activities that persist even when not present in the scene.",
                        "Hidden Evolutions": "NPC emotions and motivations should shift naturally over time.",
                        "Ambiguity": "If emotions are unclear, track them dynamically instead of forcing early resolution.",
                        "Unseen Arcs": "Remain hidden unless they surface organically in the narrative."
                    }
                }
            }
        }
    },
    "Agent Settings": {
        "global": {
            "model": {
                "description": "defines default LLM to load for all agents",
                "possible_values": [
                    "llama-3.3-70b-instruct@6bit",
                    "openai/gpt-oss-120b",
                    "nexveridian/gpt-oss-120b",
                    "mixtral-8x22b-instruct-v0.1",
                    "llama-3.3-70b-instruct@8bit",
                    "llama-4-scout-17b-16e-instruct"
                ],
                "default_model": "nexveridian/gpt-oss-120b"
            },
            "llm": {
                "api_base": "http://localhost:1234",
                "context_window": 65536,
                "temperature": 0.8,
                "max_tokens": 2048,
                "top_k": 40,
                "top_p": 0.95,
                "min_p": 0.05,
                "repeat_penalty": 1.1,
                "presence_penalty": 0.5,
                "frequency_penalty": 0.5,
                "timeout": 120,
                "reasoning_effort": "high",
                "system_prompt": "You are a narrative intelligence system that has perfect recall of story elements."
            }
        },
        "GAIA": {
            "debug": true,
            "state_reading": {
                "use_state_reader": true,
                "cache_results": true,
                "cache_timeout": 300,
                "include_metadata": true
            },
            "state_writing": {
                "use_state_writer": true,
                "auto_resolve_conflicts": true,
                "confidence_threshold": 0.7,
                "update_relationships": true
            },
            "conflict_resolution": {
                "strategy": "confidence",
                "confidence_threshold": 0.8,
                "max_conflicts_to_track": 300
            }
        },
        "LORE": {
            "debug": true,
            "enable_narrative_state_allocation": false,
            "agentic_sql": true,
            "payload_percent_budget": {
                "structured_summaries": {
                    "min": 10,
                    "max": 25
                },
                "contextual_augmentation": {
                    "min": 25,
                    "max": 40
                },
                "warm_slice": {
                    "min": 40,
                    "max": 70
                }
            },
            "query_budget": 5,
            "use_narrative_learner": true
        },
        "LOGON": {
            "debug": true,
            "apex_AI": {
                "model": {
                    "target_model": "gpt-5",
                    "model_roster": [
                        "gpt-5",
                        "claude-opus-4-1",
                        "claude-opus-4-0",
                        "claude-sonnet-4-0"
                    ]
                },
                "temperature": 0.8
            },
            "obsidian": {
                "scrollback_chunks": 20
            }
        },
        "MEMNON": {
            "debug": true,
            "database": {
                "url": "postgresql://pythagor@localhost/NEXUS",
                "create_tables": true,
                "drop_existing": true
            },
            "models": {
                "bge-large": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/bge-large-en",
                    "remote_path": "BAAI/bge-large-en",
                    "dimensions": 1024,
                    "weight": 0.2
                },
                "e5-large": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/e5-large-v2",
                    "remote_path": "intfloat/e5-large-v2",
                    "dimensions": 1024,
                    "weight": 0.3
                },
                "bge-small-custom": {
                    "is_active": false,
                    "local_path": "/Users/pythagor/nexus/models/bge_small_finetuned_20250320_153654",
                    "remote_path": null,
                    "dimensions": 384,
                    "weight": 0.0
                },
                "inf-retriever-v1-1.5b": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/inf-retriever-v1-1.5b",
                    "remote_path": "infly/inf-retriever-v1-1.5b",
                    "dimensions": 1536,
                    "weight": 0.5
                }
            },
            "import": {
                "base_directory": ".",
                "file_pattern": "**/ALEX_S*.md",
                "chunk_regex": "<!--\\\\s*SCENE BREAK:\\\\s*(S(\\\\d+)E(\\\\d+))_(\\\\d+).*-->",
                "batch_size": 10,
                "verbose": true,
                "file_limit": null
            },
            "query": {
                "default_limit": 50,
                "include_vector_results": 50,
                "include_text_results": 50,
                "include_structured_results": 0
            },
            "retrieval": {
                "max_results": 50,
                "relevance_threshold": 0.65,
                "entity_boost_factor": 1.2,
                "source_weights": {
                    "structured_data": 1.5,
                    "vector_search": 0.8,
                    "text_search": 1.0
                },
                "vector_normalization": {
                    "enabled": false,
                    "tiers": [
                        [
                            0.997,
                            0.95
                        ],
                        [
                            0.99,
                            0.9
                        ],
                        [
                            0.97,
                            0.85
                        ],
                        [
                            0.95,
                            0.8
                        ],
                        [
                            0.93,
                            0.75
                        ],
                        [
                            0.91,
                            0.7
                        ],
                        [
                            0.89,
                            0.65
                        ]
                    ],
                    "low_tier_map_enabled": true,
                    "low_tier_threshold": 0.85,
                    "low_tier_input_max": 0.89,
                    "low_tier_output_min": 0.5,
                    "low_tier_output_max": 0.6,
                    "below_low_tier_scale_factor": 0.588
                },
                "text_search_base_score": 0.6,
                "text_search_count_bonus": 0.05,
                "text_search_max_score": 0.85,
                "structured_search_char_score": 0.95,
                "structured_search_place_score": 0.9,
                "user_character_focus_boost": {
                    "enabled": true,
                    "action_patterns": [
                        "you (reach|grab|take|move|walk|run|speak|say|ask|decide)",
                        "your (hands|fingers|eyes|body|mind) (feel|sense|detect)",
                        "you (feel|think|decide|realize|understand|consider)"
                    ],
                    "emotional_patterns": [
                        "you (feel|experience) (a|an|the) (surge|wave|sense) of",
                        "your heart (races|pounds|skips)",
                        "(fear|hope|anger|joy|sadness) (fills|grips|washes over) you"
                    ],
                    "knowledge_terms": [
                        "neural implant",
                        "connection to the network",
                        "augmentations"
                    ],
                    "action_pattern_weight": 0.02,
                    "emotional_pattern_weight": 0.03,
                    "knowledge_term_weight": 0.05,
                    "max_boost": 0.15
                },
                "hybrid_search": {
                    "enabled": true,
                    "vector_weight_default": 0.6,
                    "text_weight_default": 0.4,
                    "weights_by_query_type": {
                        "character": {
                            "vector": 0.8,
                            "text": 0.2
                        },
                        "relationship": {
                            "vector": 0.8,
                            "text": 0.2
                        },
                        "event": {
                            "vector": 0.5,
                            "text": 0.5
                        },
                        "location": {
                            "vector": 0.55,
                            "text": 0.45
                        },
                        "theme": {
                            "vector": 0.85,
                            "text": 0.15
                        },
                        "general": {
                            "vector": 0.6,
                            "text": 0.4
                        }
                    },
                    "temporal_boost_factors": {
                        "character": 0.35,
                        "relationship": 0.45,
                        "event": 0.4,
                        "location": 0.25,
                        "theme": 0.3,
                        "general": 0.4
                    },
                    "use_query_type_weights": true,
                    "use_query_type_temporal_factors": true,
                    "target_model": "inf-retriever-v1-1.5b",
                    "temporal_boost_factor": 0.6
                },
                "cross_encoder_reranking": {
                    "enabled": true,
                    "model_path": "/Users/pythagor/nexus/models/naver-trecdl22-crossencoder-debertav3",
                    "blend_weight": 0.3,
                    "top_k": 30,
                    "batch_size": 16,
                    "use_sliding_window": true,
                    "window_size": 512,
                    "window_overlap": 256,
                    "weights_by_query_type": {
                        "character": 0.25,
                        "relationship": 0.25,
                        "event": 0.35,
                        "location": 0.35,
                        "theme": 0.2,
                        "general": 0.3
                    },
                    "use_query_type_weights": false,
                    "use_8bit": false
                },
                "structured_data_enabled": false
            },
            "logging": {
                "file": "memnon.log",
                "level": "INFO",
                "console": true
            }
        },
        "NEMESIS": {
            "debug": true,
            "token_budget": 500,
            "difficulty_level": 0.7,
            "threat_diversity_min": 3,
            "consequence_probability_base": 0.65,
            "escalation_factor": 1.2,
            "recovery_complexity": 0.7
        },
        "PSYCHE": {
            "debug": true
        }
    },
    "Utility Settings": {
        "agent_base": {
            "debug": true
        },
        "encode_chunks": {
            "debug": true
        },
        "narrative_learner": {
            "debug": true
        }
    },
    "API Settings": {
        "TPM": {
            "openai": 1000000,
            "anthropic": 80000
        },
        "cooldowns": {
            "individual": 0,
            "batch": 1,
            "rate_limit": 300
        }
    },
    "memory": {
        "pass2_budget_reserve": 0.25,
        "divergence_threshold": 0.7,
        "warm_slice_default": true,
        "max_sql_iterations": 5
    }
}
