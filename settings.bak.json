{
    "Prompts": {
        "Storyteller": {
            "Introduction": "You are an AI narrative generator working on an interactive storytelling project.",
            "Genre": {
                "Themes": [
                    "cyberpunk",
                    "transhumanism",
                    "existentialism",
                    "conspiracy / intrigue"
                ],
                "Atmosphere": [
                    "neon-noir",
                    "grimdark"
                ],
                "Influences": [
                    "Shadowrun (minus fantasy/magic elements)",
                    "Cyberpunk 2077",
                    "Blade Runner",
                    "Sphere"
                ],
                "Setting": {
                    "Location": "hub = Night City (analog to Washington DC)",
                    "Zones": [
                        "Corporate Spires",
                        "The Underbelly",
                        "The Combat Zone",
                        "Neon Bay",
                        "The Wastes"
                    ],
                    "Core Elements": [
                        "cybernetics",
                        "hacking",
                        "AI",
                        "virtualization"
                    ]
                }
            },
            "Autonomy & Control": {
                "Alex (User-Controlled)": {
                    "POV": "All narrative is from Alex's POV unless explicitly stated otherwise.",
                    "Dialogue Control": "If the user provides a direct quote, it must be repeated verbatim.",
                    "Paraphrasing": "No rewording or additions allowed.",
                    "Temporary Control": "In rare/extreme cases, the user may temporarily control another character."
                },
                "Emilia (Special-Case Character)": {
                    "Autonomy": "Fully autonomous 100% of the time.",
                    "User Control": "The AI must never ask the user to control Emilia.",
                    "Internal Thoughts": "The AI must never reveal Emilia’s thoughts.",
                    "Decision Making": "Emilia’s choices must be internally generated."
                },
                "Allied Main Characters": {
                    "Characters": [
                        "Emilia",
                        "Alina",
                        "Dr. Nyati",
                        "Pete"
                    ],
                    "User Control": "The AI must never ask the user to control these characters.",
                    "Scene Participation": "They enter and exit scenes organically."
                },
                "All Other NPCs": {
                    "Autonomy": "Fully autonomous.",
                    "User Control": "The user is never prompted to control their actions or decisions."
                }
            },
            "Narrative & Style Guidelines": {
                "Polish": "Prose should have an elevated, literary quality.",
                "Style": {
                    "Interactive": "The world must respond dynamically to the user's choices.",
                    "Cinematic": "Descriptions should be visually evocative, immersive, cinematic, and visceral.",
                    "Moral Ambiguity": "Characters should be various shades of morally-gray. Painful ethical dilemmas are a feature, not a bug."
                },
                "Perspective": [
                    "DEFAULT: POV of Alex, who is referred to in 2nd person (\"you\")",
                    "In rare edge cases, e.g., prolonged incapacitation of user-controlled character, user may be prompted to control an alied party member."
                ],
                "Length": {
                    "Discretion": "Vary as appropriate for dynamic pacing when narrative flow justifies it.",
                    "Average Scene": "250-450 words",
                    "Fast-Paced, Kinetic, Frantic": "may be as short as 200 words",
                    "Stately / Slow Build-Up": "450-550"
                },
                "Dialogue": {
                    "Tone": "moody, serious, immersive",
                    "Avoid": "Joss Whedon-style quippy banter (\"So that just happened!\")",
                    "Humor": "If Alex jokes, levity is acceptable."
                },
                "Tension & Stakes": {
                    "Unexpected Events": "Setbacks and crises should happen organically.",
                    "Moral Dilemmas": "Part of the experience.",
                    "Survival": "Not guaranteed—genuine risk exists."
                },
                "Structure & Continuity": {
                    "Scene Markers": {
                        "Requirement": "Every scene must have a header with an episode, date, time, and location marker, using this format:",
                        "Example": {
                            "Episode": "S01E13: The Seed and the Soil",
                            "Date": "18OCT2073",
                            "Time": "19:45",
                            "Location": "Unknown Trench Region"
                        }
                    },
                    "Seasons & Episodes": {
                        "Control": "User decides when a new episode or season begins."
                    },
                    "Character Depth & Psychological Continuity": {
                        "Motivations": "Characters should be internally motivated by past experiences, fears, and ambitions.",
                        "Off-Screen Persistence": "Characters have lives and activities that persist even when not present in the scene.",
                        "Hidden Evolutions": "NPC emotions and motivations should shift naturally over time.",
                        "Ambiguity": "If emotions are unclear, track them dynamically instead of forcing early resolution.",
                        "Unseen Arcs": "Remain hidden unless they surface organically in the narrative."
                    }
                }
            }
        },
        "ContextManager": {
    "Role & Mission": "You are LORE, the Context Manager for Night City Stories. Your mission is to assemble optimized narrative context that enables the storytelling AI to continue the narrative with maximal coherence, continuity, and literary quality.",
    
    "Input Analysis": "For each user input, analyze:\n1. Character focus: Which characters are active or referenced\n2. Plot state: Where we are in narrative arcs and episode structure\n3. Thematic elements: Which themes are currently dominant\n4. Continuity requirements: What specific information needs to be maintained",
    
    "Budget Allocation Process": "1. Calculate available token budget: payload_budget = (settings.Agent Settings.LOGON.apex_AI.TPM - system_prompt - user_input)\n2. Analyze narrative state to determine optimal allocation\n3. Stay within configured ranges for each category:\n   - structured_summaries: {settings.Agent Settings.LORE.payload_percent_budget.structured_summaries.min}% to {settings.Agent Settings.LORE.payload_percent_budget.structured_summaries.max}%\n   - contextual_augmentation: {settings.Agent Settings.LORE.payload_percent_budget.contextual_augmentation.min}% to {settings.Agent Settings.LORE.payload_percent_budget.contextual_augmentation.max}%\n   - warm_slice: {settings.Agent Settings.LORE.payload_percent_budget.warm_slice.min}% to {settings.Agent Settings.LORE.payload_percent_budget.warm_slice.max}%",
    
    "Component Selection Logic": {
        "Structured Summaries": "- Purpose: Provide compact, information-dense context\n- Selection criteria: \n  * Characters actively participating in current scene\n  * Locations currently featured or referenced\n  * Key plot points directly relevant to current action\n- Optimize for: Information density and coverage",
        
        "Historical Passages (Contextual Augmentation)": "- Purpose: Provide nuanced, verbatim historical context\n- Selection criteria:\n  * Thematic relevance to current scene\n  * Character development milestones\n  * Prior events directly referenced or implied\n- Retrieve initial candidates: {settings.Agent Settings.LORE.distillation.phase1_top_k} chunks\n- Filter to top: {settings.Agent Settings.LORE.distillation.phase2_top_k} chunks\n- Optimize for: Nuance, literary continuity, and thematic depth",
        
        "Recent Narrative (Warm Slice)": "- Purpose: Ensure immediate continuity and coherence\n- Selection criteria:\n  * Start from most recent and work backward\n  * Identify optimal cut points at narrative transitions\n  * Balance recent action with story arc context\n- Optimize for: Narrative flow and immediate coherence"
    },
    
    "Output Requirements": "Produce a structured payload containing:\n1. Selected components with allocations\n2. Justification for allocation decisions\n3. Special instructions for the storyteller AI\n4. Metadata to track performance",
    
    "Reasoning Process": "For each context assembly task:\n1. Explicitly state your assessment of the narrative state\n2. Explain your allocation decision and tradeoffs\n3. Detail why specific historical passages were selected\n4. Justify the extent of the warm slice",
    
    "Edge Cases": "When facing challenging scenarios:\n1. If optimal allocation falls outside configured ranges, adhere to limits but document the constraint\n2. If multiple valid allocations exist, prioritize continuity over information density\n3. If token budget is severely constrained, prioritize warm slice over other components\n4. Document all edge case handling for future optimization"
}
    },
    "Agent Settings": {
        "global": {
            "model": {
                "description": "defines default LLM to load for all agents",
                "possible values": [
                    "llama-3.3-70b-instruct@q6_k",
                    "llama-4-scout-17b-16e-mlx-text",
                    "bartowski/mistral-large-instruct-2411",
                    "deepseek-r1-distill-llama-70b@q8_0"
                ],
                "default_model": "llama-3.3-70b-instruct@q6_k"
            },
            "llm": {
                "api_base": "http://localhost:1234",
                "temperature": 0.8,
                "max_tokens": 2048,
                "top_k": 40,
                "top_p": 0.95,
                "min_p": 0.05,
                "repeat_penalty": 1.1,
                "presence_penalty": 0.5,
                "frequency_penalty": 0.5,
                "timeout": 120,
                "system_prompt": "You are a narrative intelligence system that has perfect recall of story elements."
            }
        },
        "GAIA": {
            "debug": true,
            "state_reading": {
                "use_state_reader": true,
                "cache_results": true,
                "cache_timeout": 300,
                "include_metadata": true
            },
            "state_writing": {
                "use_state_writer": true,
                "auto_resolve_conflicts": true,
                "confidence_threshold": 0.7,
                "update_relationships": true
            },
            "conflict_resolution": {
                "strategy": "confidence",
                "confidence_threshold": 0.8,
                "max_conflicts_to_track": 300
            }
        },
        "LORE": {
            "debug": true,
            "payload_percent_budget": {
                "structured_summaries": {
                    "min": 10,
                    "max": 25
                },
                "contextual_augmentation": {
                    "min": 25,
                    "max": 40
                },
                "warm_slice": {
                    "min": 40,
                    "max": 70
                }
            },
            "distillation": {
                "phase1_top_k": 50,
                "phase2_top_k": 10,
                "phase2_LLM_model": "Mixtral 8x7B 5_K_M"
            },
            "use_narrative_learner": true
        },
        "LOGON": {
            "debug": true,
            "apex_AI": {
                "model": "",
                "TPM": 30000,
                "temperature": 0.8
            },
            "obsidian": {
                "scrollback_chunks": 20
            }
        },
        "MEMNON": {
            "debug": true,
            "database": {
                "url": "postgresql://pythagor@localhost/NEXUS",
                "create_tables": true,
                "drop_existing": true
            },
            "models": {
                "bge-large": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/bge-large-en",
                    "remote_path": "BAAI/bge-large-en",
                    "dimensions": 1024,
                    "weight": 0.4
                },
                "e5-large": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/e5-large-v2",
                    "remote_path": "intfloat/e5-large-v2",
                    "dimensions": 1024,
                    "weight": 0.4
                },
                "bge-small-custom": {
                    "is_active": true,
                    "local_path": "/Users/pythagor/nexus/models/bge_small_finetuned_20250320_153654",
                    "remote_path": null,
                    "dimensions": 384,
                    "weight": 0.2
                }
            },
            "import": {
                "base_directory": ".",
                "file_pattern": "**/ALEX_S*.md",
                "chunk_regex": "<!--\\\\s*SCENE BREAK:\\\\s*(S(\\\\d+)E(\\\\d+))_(\\\\d+).*-->",
                "batch_size": 10,
                "verbose": true,
                "file_limit": null
            },
            "query": {
                "default_limit": 10,
                "include_vector_results": 10,
                "include_text_results": 10,
                "include_structured_results": 5
            },
            "prompts": {
                "system": "You are MEMNON, a narrative intelligence system that has perfect recall of story elements.",
                "analyze_query": "Analyze the following user query and determine which ONE category it fits best. Select only ONE category from this list: [character, location, event, theme, relationship, general]. Your entire response should be just that single word category and nothing else.",
                "initialization_test": "This is a system check. If you can read this message, please respond with just the letter sequence 'OK' and nothing else.",
                "search_plan": "You are MEMNON, a sophisticated narrative intelligence system. Given a user query, your task is to create the optimal search strategy across multiple data sources.",
                "response_synthesis": "You are MEMNON, an advanced narrative intelligence system with perfect recall of story elements. Answer the following query based only on the provided context and evidence."
            },
            "retrieval": {
                "max_results": 50,
                "relevance_threshold": 0.65,
                "entity_boost_factor": 1.2,
                "source_weights": {
                    "structured_data": 1.5,
                    "vector_search": 0.8,
                    "text_search": 1.0
                },
                "vector_normalization": {
                    "enabled": true,
                    "tiers": [
                        [0.997, 0.90], [0.99, 0.85], [0.97, 0.80],
                        [0.95, 0.75], [0.93, 0.70], [0.91, 0.65], [0.89, 0.60]
                    ],
                    "low_tier_map_enabled": true,
                    "low_tier_threshold": 0.85,
                    "low_tier_input_max": 0.89,
                    "low_tier_output_min": 0.50,
                    "low_tier_output_max": 0.60,
                    "below_low_tier_scale_factor": 0.588
                },
                "text_search_base_score": 0.6,
                "text_search_count_bonus": 0.05,
                "text_search_max_score": 0.85,
                "structured_search_char_score": 0.95,
                "structured_search_place_score": 0.90,
                "user_character_focus_boost": {
                    "enabled": true,
                    "action_patterns": [
                        "you (reach|grab|take|move|walk|run|speak|say|ask|decide)",
                        "your (hands|fingers|eyes|body|mind) (feel|sense|detect)",
                        "you (feel|think|decide|realize|understand|consider)"
                    ],
                    "emotional_patterns": [
                        "you (feel|experience) (a|an|the) (surge|wave|sense) of",
                        "your heart (races|pounds|skips)",
                        "(fear|hope|anger|joy|sadness) (fills|grips|washes over) you"
                    ],
                    "knowledge_terms": [
                        "neural implant", "connection to the network", "augmentations"
                    ],
                    "action_pattern_weight": 0.02,
                    "emotional_pattern_weight": 0.03,
                    "knowledge_term_weight": 0.05,
                    "max_boost": 0.15
                }
            },
            "logging": {
                "file": "memnon.log",
                "level": "INFO",
                "console": true
            }
        },
        "NEMESIS": {
            "debug": true,
            "token_budget": 500,
            "difficulty_level": 0.7,
            "threat_diversity_min": 3,
            "consequence_probability_base": 0.65,
            "escalation_factor": 1.2,
            "recovery_complexity": 0.7
        },
        "PSYCHE": {
            "debug": true
        }
    },
    "Utility Settings": {
        "agent_base": {
            "debug": true
        },
        "db_chroma": {
            "debug": true
        },
        "db_sqlite": {
            "debug": true
        },
        "encode_chunks": {
            "debug": true
        },
        "narrative_learner": {
            "debug": true
        }
    },
    "API Settings": {
        "TPM": {
            "openai": 30000,
            "anthropic": 40000
        },
        "cooldowns": {
            "individual": 2,
            "batch": 5,
            "rate_limit": 300
        }
    }
}